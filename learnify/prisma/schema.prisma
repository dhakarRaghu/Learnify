generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  credits       Int          @default(5)
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  videoModules  VideoModule[] // Videos organized in modules
}

model Course {
  id        String   @id @default(cuid())
  name      String
  image     String
  userId    String
  createdAt DateTime @default(now())
  units     Unit[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Unit {
  id       String    @id @default(cuid())
  courseId String
  name     String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters Chapter[]
  @@index([courseId], name: "courseId")
}

model Chapter {
  id                 String     @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.Text
  unit               Unit       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  questions          Question[]
  @@index([unitId], name: "unitId")
}

model Question {
  id        String  @id @default(cuid())
  chapterId String
  question  String  @db.Text
  answer    String  @db.Text
  options   String  @db.Text
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  @@index([chapterId], name: "chapterId")
}

model VideoModule {
  id        String   @id @default(cuid())
  name      String   @default("New Module")
  userId    String
  createdAt DateTime @default(now())
  videos    Video[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], name: "videoModule_userId_index")
}

model Video {
  id            String       @id @default(cuid())
  name          String?
  url           String       @unique
  videoId       String       
  summary       String?      @db.Text
  moduleId      String?
  createdAt     DateTime     @default(now())
  videoModule   VideoModule? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  @@index([moduleId], name: "video_moduleId_index")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId], name: "account_userId_index")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], name: "session_userId_index")
}
